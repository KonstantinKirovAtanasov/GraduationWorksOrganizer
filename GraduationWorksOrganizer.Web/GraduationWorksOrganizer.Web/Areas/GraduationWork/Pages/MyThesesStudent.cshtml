@page
@model GraduationWorksOrganizer.Web.Areas.GraduationWork.Pages.MyThesesStudentModel
@{
}
<div class="content-heading">
    <p class="h3">Моите теми</p>
</div>
@if (Model.CurrentTheseses.Any())
{
    foreach (GraduationWorksOrganizer.Web.Areas.GraduationWork.ViewModels.CompositePreviewThesisViewModel thesisModel in Model.CurrentTheseses)
    {
        <div class="container border-bottom mb-3">
            <div class="row">
                <div class="col">
                    <div class="row-md">
                        <text class="text-left font-weight-bold">@thesisModel.ThesisViewModel.Title</text>
                    </div>
                    <div class="row-md">
                        <text class="text-left">@thesisModel.ThesisViewModel.Subject.Name</text>
                    </div>
                    <div class="row-md">
                        <text class="text-left">От дата: </text>
                        <text class="text-left">@thesisModel.ThesisViewModel.CreationDate.ToShortDateString()</text>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="row justify-content-end">
                            <a class="float-right" data-toggle="modal" data-target="#exampleModal-@thesisModel.ThesisViewModel.Id">
                                <img class="icon" src="~/images/previewThesisIcon.png" />
                            </a>
                            @if (thesisModel.UserEntry.State == GraduationWorksOrganizer.Common.Enums.ThesisUserEntryState.Initialized)
                            {
                                <a class="float-right file-request" data-toggle="collapse" href="#collapse-upload-data-@thesisModel.UserEntry.Id" role="button" aria-expanded="false" data-ajax-request-filename="@thesisModel.UserEntry.Id">
                                    <img class="icon" src="~/images/uploadIcon.png" />
                                </a>
                                <a class="float-right process-theses" data-toggle="collapse" href="#collapse-request-teacher-@thesisModel.UserEntry.Id" role="button" aria-expanded="false" data-ajax-request-subject="@thesisModel.ThesisViewModel.Subject.Id" data-ajax-userentry="@thesisModel.UserEntry.Id">
                                    <img class="icon" src="~/images/peoceedIcon.png" />
                                </a>
                            }
                            <a class="float-right" asp-area="GraduationWork" asp-page="/ThesesCorrespondence" asp-route-userEntryId="@thesisModel.UserEntry.Id">
                                <img class="icon" src="~/images/correspondancepng.png" />
                            </a>
                        </div>
                        @if (thesisModel.UserEntry.State == GraduationWorksOrganizer.Common.Enums.ThesisUserEntryState.Initialized)
                        {
                            <div class="row justify-content-end">
                                <text style="font-weight: bold; color:Highlight">Текуща</text>
                            </div>
                        }
                        else if (thesisModel.UserEntry.State == GraduationWorksOrganizer.Common.Enums.ThesisUserEntryState.SendForApprovement)
                        {
                            <div class="row justify-content-end">
                                <text style="font-weight: bold; color:orange">Изпратена за одобрение</text>
                            </div>
                        }
                        else if (thesisModel.UserEntry.State == GraduationWorksOrganizer.Common.Enums.ThesisUserEntryState.Approve)
                        {
                            <div class="row justify-content-end">
                                <text style="font-weight: bold; color:forestgreen">Одобрена</text>
                            </div>
                        }
                        else if (thesisModel.UserEntry.State == GraduationWorksOrganizer.Common.Enums.ThesisUserEntryState.CompletedWithMarkItem)
                        {
                            <div class="row justify-content-end">
                                <text style="font-weight: bold;">Завършена с оценка</text>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="modal fade" id="exampleModal-@thesisModel.ThesisViewModel.Id" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel-@thesisModel.ThesisViewModel.Id" aria-hidden="true">
                <div class="modal-dialog modal-lg" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel-@thesisModel.ThesisViewModel.Id">@thesisModel.ThesisViewModel.Title</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body" style="width:100%">
                            <p class="font-weight-bold">Описание</p>
                            <p class="text-md-left" style="white-space: pre-wrap">@thesisModel.ThesisViewModel.Description </p>
                            <p class="font-weight-bold">Изисквания</p>
                            @foreach (GraduationWorksOrganizer.Web.Areas.GraduationWork.ViewModels.InnerRequermentViewModel requerment in thesisModel.ThesisViewModel.Requerments)
                            {
                                <div class="row">
                                    <div class="col text-left">
                                        <text>&#8226;</text>
                                        <text style="white-space: pre-wrap">@requerment.Description</text>
                                    </div>
                                    <div class="col text-right">
                                        <text>@requerment.MaxPointsCount точки</text>
                                    </div>
                                </div>
                            }
                            <span />
                            <div class="row">
                                <div class="col text-left">
                                    <text>@thesisModel.ThesisViewModel.Type</text>
                                </div>
                                <div class="col text-right">
                                    <text>@thesisModel.ThesisViewModel.CreationDate.ToShortDateString() </text>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="collapse-upload-data-@thesisModel.UserEntry.Id" class="collapse">
                <div class="container-fluid">
                    <div class="content-heading">
                        <p>Прикачване на материали</p>
                    </div>
                    <div id="file-manifest-@thesisModel.UserEntry.Id" class="container-fluid" data-ajax-request-filename="@thesisModel.UserEntry.Id">
                        <form id="file-upload-form-@thesisModel.UserEntry.Id" name="formFile">
                            <div class="custom-file">
                                <input id="file-upload-input-@thesisModel.UserEntry.Id" type="file" class="custom-file-input">
                                <label class="custom-file-label">Изберете файл</label>
                            </div>
                        </form>
                    </div>
                </div>
                <br />
            </div>
            <div id="collapse-request-teacher-@thesisModel.UserEntry.Id" class="collapse">
                <div class="container-fluid">
                    <form method="post" class="helpinfodefault" data-helpmessagekey="defaulthelpmessage">
                        <div class="content-heading">
                            <p>Изпращане на @thesisModel.ThesisViewModel.Type</p>
                        </div>
                        <div class="container-fluid">
                            <div class="row">
                                <div class="col-lg-12">
                                    <p class="font-weight-bold">Изберете преподавател</p>
                                    <span asp-validation-for="Input.ThemeObserverId" />
                                    <select id=select-teacher-@thesisModel.UserEntry.Id class="form-control requestTeachers resize" asp-for="Input.ThemeObserverId" data-ajax-request-subject="@thesisModel.ThesisViewModel.Subject.Id">
                                    </select>
                                    <p class="font-weight-bold">Описание на заявката</p>
                                    <textarea class="form-control resize" asp-for="Input.RequestDescription"></textarea>
                                    <input type="hidden" asp-for="Input.ThesesUserEntryId" value="@thesisModel.UserEntry.Id" />
                                </div>
                            </div>
                            <br />
                            <div class="row justify-content-end">
                                <button type="submit" class="btn btn-light border">Изпрати</button>
                            </div>
                        </div>
                    </form>
                </div>
                <br />
            </div>
        </div>
    }
}
else
{ <h3>Нямате записани теми</h3>
}

@section Scripts{
    <script src="~/js/global/autoHeigthTextArea.js"></script>
    <script>
        let filesCache = {};
        let teachersCache = {};

        const attrNameFiles = 'data-ajax-request-filename'
        const attrSubjectId = 'data-ajax-request-subject'
        const attrUserEntry = 'data-ajax-userentry'
        const attrFileId = 'data-ajax-request'

        const deleteIconUrl = 'https://localhost:44306/images/deleteIcon.png'
        const downloadIconUrl = 'https://localhost:44306/images/downloadIcon.png'
        const apiEndPoint = 'https://localhost:44306/api/file'
        const downloadFileEndPoint = 'https://localhost:44306/api/file/download'
        const teachersApi = 'https://localhost:44306/api/teachers'

        window.onloaded = AddEventHandlers();

        function AddEventHandlers() {
            let fileRequestItems = document.getElementsByClassName('file-request');
            for (let i = 0; i < fileRequestItems.length; i++) {
                fileRequestItems[i].addEventListener('click', function (event) {
                    RequestApiForFileNames(event.target);
                });
            }
            let divFileInputs = document.getElementsByClassName('custom-file');
            for (let i = 0; i < divFileInputs.length; i++) {
                divFileInputs[i].firstElementChild.addEventListener('change', OnFileUploadedAction);
            }

            let processThesesItems = document.getElementsByClassName('process-theses');
            for (let i = 0; i < processThesesItems.length; i++) {
                processThesesItems[i].addEventListener('click', function (event) {
                    RequestTeachers(processThesesItems[i]);
                });
            }
        }

        function OnFileNamesGetted(fileNames, filesManifestItem) {
            for (let i = 0; i < fileNames.length; i++) {
                AddNewFileElement(fileNames[i], filesManifestItem);
            }
        }

        function AddNewFileElement(fileItem, fileManifestElement) {
            let divElement = BuildDivItem(fileItem);
            fileManifestElement.insertBefore(divElement, fileManifestElement.firstChild);
        }

        function BuildDivItem(fileItem) {
            let divrow = document.createElement('DIV');
            let iconscol = document.createElement('DIV');
            let namecol = document.createElement('DIV');
            let filenameText = document.createElement('TEXT');
            let deleteIconItem = document.createElement('IMG');
            let deleteIconParent = document.createElement('A');
            let downloadIconItem = document.createElement('IMG');
            let downloadIconParent = document.createElement('A');

            divrow.className += 'row';
            namecol.className += 'col-md justify-content-left';
            iconscol.className += 'justify-content-right';
            deleteIconItem.className += 'icon';
            deleteIconParent.className += 'nav-item btn btn-floating float-right';
            downloadIconItem.className += 'icon';
            downloadIconParent.className += 'nav-item btn btn-floating float-right';

            filenameText.innerHTML = fileItem.fileName;
            $(deleteIconParent).attr(attrFileId, fileItem.id);
            $(deleteIconParent).attr('role', 'button');
            $(downloadIconParent).attr(attrFileId, fileItem.id);
            $(downloadIconParent).attr('role', 'button');
            $(deleteIconItem).attr('src', deleteIconUrl);
            $(downloadIconItem).attr('src', downloadIconUrl);

            deleteIconParent.appendChild(deleteIconItem);
            downloadIconParent.appendChild(downloadIconItem);
            namecol.appendChild(filenameText);
            iconscol.appendChild(deleteIconParent);
            iconscol.appendChild(downloadIconParent);
            divrow.appendChild(namecol);
            divrow.appendChild(iconscol);

            deleteIconParent.addEventListener('click', DeleteClickedEventHandler);
            downloadIconParent.addEventListener('click', DownloadClickedEventHandler);
            return divrow;
        }

        function DownloadClickedEventHandler(event) {
            const fileId = this.getAttribute(attrFileId);
            DownloadFileRequest(fileId);
        }

        function DownloadFileRequest(fileId) {

            let xhr = new XMLHttpRequest();
            xhr.open("GET", downloadFileEndPoint, true);
            xhr.responseType = 'arraybuffer';
            xhr.setRequestHeader('fileContentId', fileId);
            xhr.send(null);
            xhr.onreadystatechange = function () {
                if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                    DownloadActualFile();
                }
            }

            function DownloadActualFile() {
                let fileName = xhr.getResponseHeader('fileName');
                let url = window.URL.createObjectURL(new Blob([xhr.response]));
                let downloadElement = document.createElement("a");

                document.body.appendChild(downloadElement);
                downloadElement.style = "display: none";
                downloadElement.download = fileName;
                downloadElement.href = url;
                downloadElement.click();

                document.body.removeChild(downloadElement);
            };
        }

        function DeleteClickedEventHandler(event) {
            const fileId = this.getAttribute(attrFileId);
            let parentRow = this.parentElement.parentElement;
            DeleteFileRequest(fileId, parentRow);
        }

        function DeleteFileRequest(fileId, parentRow) {
            $.ajax({
                method: 'DELETE',
                url: apiEndPoint,
                headers: {
                    fileContentId: fileId,
                },
                success: function DeleteRow() {
                    parentRow.remove();
                }
            })
        }

        function OnFileUploadedAction() {
            const formData = CreateFileFormData(this);
            UploadFile(formData, this);
        }

        function CreateFileFormData(input) {
            let formData = new FormData();
            if (input.files[0] != null && input.files[0] != 'undefined') {
                formData.append('file', input.files[0], input.files[0].name);
                console.log(input.files[0])
            }
            return formData;
        }

        function UploadFile(formData, input) {
            const userEntryId = $(input.parentElement.parentElement.parentElement).attr(attrNameFiles);
            $.ajax({
                method: 'PUT',
                headers: {
                    thesisUserEntryId: userEntryId
                },
                contentType: false,
                processData: false,
                url: apiEndPoint,
                data: formData,
                success: function (result) {
                    let fileManifest = document.getElementById('file-manifest-' + userEntryId);
                    AddNewFileElement(result, fileManifest);
                },
            });
        }

        function RequestApiForFileNames(item) {
            let attributeValue = $(item).attr(attrNameFiles);
            if (attributeValue == null || attributeValue == 'undefined') {
                attributeValue = $(item.parentElement).attr(attrNameFiles)
            }

            if (filesCache[attributeValue])
                return;

            $.ajax({
                method: 'GET',
                url: apiEndPoint + '/' + attributeValue,
                success: function (result) {
                    let fileManifest = document.getElementById('file-manifest-' + attributeValue);
                    console.log('file-manifest-' + attributeValue);
                    console.log(fileManifest);
                    OnFileNamesGetted(result, fileManifest);
                },
                error: function (error) { console.log(error) },
            });

            filesCache[attributeValue] = true;
        }

        function RequestTeachers(item) {
            let attributeValue = $(item).attr(attrSubjectId);
            const userEntryId = $(item).attr(attrUserEntry);
            if (teachersCache[userEntryId])
                return;

            $.ajax({
                method: 'GET',
                url: teachersApi,
                headers: {
                    subjectId: attributeValue,
                },
                success: function (data) {
                    AddSelectTeacherOptions(userEntryId, data);
                }
            })
        }

        function AddSelectTeacherOptions(userEntryId, data) {

            let teachersSelectElement = document.getElementById('select-teacher-' + userEntryId);
            console.log(teachersSelectElement);
            for (let i = 0; i < data.length; i++) {
                console.log(data);
                console.log(data[i]);
                let option = document.createElement('OPTION');
                let textleft = document.createElement('TEXT');

                textleft.className += 'text-left';
                option.appendChild(textleft);

                textleft.innerText = data[i].scienceDegree + ' ' + data[i].name;

                option.value = data[i].id;
                console.log(option);

                teachersSelectElement.appendChild(option);
                teachersCache[userEntryId] = true;
            }
        }
    </script>

}
