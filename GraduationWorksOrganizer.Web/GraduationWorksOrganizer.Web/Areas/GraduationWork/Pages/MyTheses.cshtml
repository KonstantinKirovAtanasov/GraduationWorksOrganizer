@page
@model GraduationWorksOrganizer.Web.Areas.GraduationWork.Pages.MyThesesModel
@{
}

<h1> Моите теми</h1>

@if (Model.Theseses.Any())
{
    foreach (GraduationWorksOrganizer.Web.Areas.GraduationWork.ViewModels.CompositePreviewThesisViewModel thesisModel in Model.Theseses)
    {
        <div class="row border">
            <div class="col-md">
                <div class="row">
                    <text class="text-left font-weight-bold">@thesisModel.ThesisViewModel.Title</text>
                </div>
                <div class="row">
                    <text class="text-left">@thesisModel.ThesisViewModel.Subject.Name</text>
                </div>
                <div class="row">
                    <text class="text-left">@thesisModel.ThesisViewModel.CreationDate.ToShortDateString()</text>
                </div>
            </div>
            <div class="justify-content-right">
                <div class="row">
                    <a class="nav-item btn btn-floating float-right" data-toggle="modal" data-target="#exampleModal-@thesisModel.ThesisViewModel.Id">
                        <img class="icon" src="~/images/previewThesisIcon.png" />
                    </a>
                    <a class="nav-item btn btn-floating float-right file-request" data-toggle="collapse" href="#collapse-upload-data-@thesisModel.UserEntry.Id" role="button" aria-expanded="false" data-ajax-request-filename="@thesisModel.UserEntry.Id">
                        <img class="icon" src="~/images/uploadIcon.png" />
                    </a>
                    <a class="nav-item btn btn-floating float-right" data-toggle="collapse" href="#collapse-request-teacher-@thesisModel.UserEntry.Id" role="button" aria-expanded="false">
                        <img class="icon" src="~/images/peoceedIcon.png" />
                    </a>
                </div>
            </div>
            <hr />
        </div>
        <div class="modal fade" id="exampleModal-@thesisModel.ThesisViewModel.Id" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel--@thesisModel.ThesisViewModel.Id" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel-@thesisModel.ThesisViewModel.Id">@thesisModel.ThesisViewModel.Title</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body" style="width:100%">
                        <p class="font-weight-bold">Описание</p>
                        <p class="text-md-left">@thesisModel.ThesisViewModel.Description </p>
                        <p class="font-weight-bold">Изисквания</p>
                        @foreach (GraduationWorksOrganizer.Web.Areas.GraduationWork.ViewModels.RequermentViewModel requerment in thesisModel.ThesisViewModel.Requerments)
                        {
                            <div class="row">
                                <div class="col text-left">
                                    <text>&#8226;</text>
                                    <text>@requerment.Description</text>
                                </div>
                                <div class="col text-right">
                                    <text>@requerment.MaxPointsCount точки</text>
                                </div>
                            </div>
                        }
                        <span />
                        <div class="row">
                            <div class="col text-left">
                                <text>@thesisModel.ThesisViewModel.Type</text>
                            </div>
                            <div class="col text-right">
                                <text>@thesisModel.ThesisViewModel.CreationDate.ToShortDateString() </text>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="collapse-upload-data-@thesisModel.UserEntry.Id" class="collapse">
            <br />
            <div id="file-manifest-@thesisModel.UserEntry.Id" class="container-fluid" data-ajax-request-filename="@thesisModel.UserEntry.Id">
                <form id="file-upload-form-@thesisModel.UserEntry.Id" name="formFile">
                    <div class="custom-file">
                        <input id="file-upload-input-@thesisModel.UserEntry.Id" type="file" class="custom-file-input">
                        <label class="custom-file-label">Изберете файл</label>
                    </div>
                </form>
            </div>
        </div>
        <div id="collapse-request-teacher-@thesisModel.UserEntry.Id" class="collapse border">
            <br />
            <p>Tuk shte e logikara za request za odobrenie</p>
        </div>

        <br />
    }
}
else
{ <h3>Нямате записани теми</h3>
}


@section Scripts{

    <script>
        let filesCache = {};
        const attrNameFiles = 'data-ajax-request-filename'
        const AttrNameDownload = 'data-ajax-request-download'
        const deleteIconUrl = 'https://localhost:44306/images/deleteIcon.png'
        const apiEndPoint = 'https://localhost:44306/api/file'

        window.onloaded = AddEventHandlers();

        function AddEventHandlers() {
            let fileRequestItems = document.getElementsByClassName('file-request');
            for (let i = 0; i < fileRequestItems.length; i++) {
                fileRequestItems[i].addEventListener('click', function (event) {
                    RequestApiForFileNames(event.target);
                });
            }
            let divFileInputs = document.getElementsByClassName('custom-file');
            for (let i = 0; i < divFileInputs.length; i++) {
                divFileInputs[i].firstElementChild.addEventListener('change', OnFileUploadedAction);
            }
        }

        function OnFileNamesGetted(fileNames, filesManifestItem) {
            for (let i = 0; i < fileNames.length; i++) {
                AddNewFileElement(fileNames[i], filesManifestItem);
            }
        }

        function AddNewFileElement(fileItem, fileManifestElement) {
            let divElement = BuildDivItem(fileItem);
            fileManifestElement.insertBefore(divElement, fileManifestElement.firstChild);
        }

        function BuildDivItem(fileItem) {
            let divrow = document.createElement('DIV');
            let iconcol = document.createElement('DIV');
            let namecol = document.createElement('DIV');
            let filenameText = document.createElement('TEXT');
            let iconItem = document.createElement('IMG');

            divrow.className += 'row';
            namecol.className += 'col-md justify-content-left';
            iconcol.className += 'justify-content-right';
            iconItem.className += 'icon';

            filenameText.innerHTML = fileItem.fileName;
            $(iconItem).attr(AttrNameDownload, fileItem.id);
            $(iconItem).attr('src', deleteIconUrl);
            namecol.appendChild(filenameText);
            iconcol.appendChild(iconItem);
            divrow.appendChild(namecol);
            divrow.appendChild(iconcol);

            return divrow;
        }

        function OnFileUploadedAction() {
            const formData = CreateFileFormData(this);
            UploadFile(formData, this);
        }

        function CreateFileFormData(input) {
            let formData = new FormData();
            if (input.files[0] != null && input.files[0] != 'undefined') {
                formData.append('file', input.files[0], input.files[0].name);
                console.log(input.files[0])
            }
            return formData;
        }

        function UploadFile(formData, input) {
            const userEntryId = $(input.parentElement.parentElement.parentElement).attr(attrNameFiles);
            $.ajax({
                method: 'PUT',
                headers: {
                    thesisUserEntryId: userEntryId
                },
                contentType: false,
                processData: false,
                url: apiEndPoint,
                data: formData,
                success: function (result) {
                    let fileManifest = document.getElementById('file-manifest-' + userEntryId);
                    console.log('file-manifest-' + userEntryId);
                    console.log(fileManifest);
                    AddNewFileElement(result, fileManifest);
                },
            });
        }

        function RequestApiForFileNames(item) {
            let attributeValue = $(item).attr(attrNameFiles);
            if (attributeValue == null || attributeValue == 'undefined') {
                attributeValue = $(item.parentElement).attr(attrNameFiles)
            }

            if (filesCache[attributeValue])
                return;

            $.ajax({
                method: 'GET',
                url: apiEndPoint + '/' + attributeValue,
                success: function (result) {
                    let fileManifest = document.getElementById('file-manifest-' + attributeValue);
                    console.log('file-manifest-' + attributeValue);
                    console.log(fileManifest);
                    OnFileNamesGetted(result, fileManifest);
                },
                error: function (error) { console.log(error) },
            });

            filesCache[attributeValue] = true;
        }

    </script>

}